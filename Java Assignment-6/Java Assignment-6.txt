Q1. What is Collection in Java?

Ans: In Java, a collection is a framework that provides a set of classes and interfaces to store, manipulate, and manage 
	groups of objects. It is used to organize and handle groups of related elements as a single unit. The Collection 
	framework provides various implementations, such as List, Set, and Map, each offering different functionalities and 
	characteristics. Collections offer methods for adding, removing, iterating, searching, and sorting elements. They 
	facilitate data manipulation, data storage, and provide convenient ways to work with groups of objects in Java applications.


Q2. Differentiate between Collection and collections in the context of Java.

Ans: In the context of Java:

Collection is a interface present in java.util.package. It is used to represent a group of individual objects as a single unit. 
It is similar to the container in the C++ language. The collection is considered as the root interface of the collection framework. 
It provides several classes and interfaces to represent a group of individual objects as a single unit. 

The List, Set, and Queue are the main sub-interfaces of the collection interface. The map interface is also part of the java 
collection framework, but it doesnâ€™t inherit the collection of the interface. The add(), remove(), clear(), size(), and contains()
are the important methods of the Collection interface.


Collections is a utility class present in java.util.package. It defines several utility methods like sorting and searching 
which is used to operate on collection. It has all static methods. These methods provide much-needed convenience to 
developers, allowing them to effectively work with Collection Framework.

Example:
========

// Java program to demonstrate the difference
// between Collection and Collections

import java.io.*;
import java.util.*;

class GFG {
	
	public static void main (String[] args)
	{
		
	// Creating an object of List<String>
	List<String> arrlist = new ArrayList<String>();
		
	// Adding elements to arrlist
	arrlist.add("geeks");
	arrlist.add("for");
	arrlist.add("geeks");
		
	// Printing the elements of arrlist
	// before operations
	System.out.println("Elements of arrlist before the operations:");
	System.out.println(arrlist);
		
	System.out.println("Elements of arrlist after the operations:");
		
	// Adding all the specified elements
	// to the specified collection
	Collections.addAll(arrlist, "web", "site");      //use of Collections
		
	// Printing the arrlist after
	// performing addAll() method
	System.out.println(arrlist);
		
	// Sorting all the elements of the
	// specified collection according to
	// default sorting order
	Collections.sort(arrlist);               //use of Collections 
		
	// Printing the arrlist after
	// performing sort() method
	System.out.println(arrlist);
		
	}
}


Q3. What are the advantages of the Collection framework?

Ans: The advantages of the Collection framework in Java are:

  Reusability and Standardization: The Collection framework provides a set of reusable data structures and algorithms, 
	allowing developers to use well-tested and efficient implementations of various collection types.

  Increased Productivity: The framework offers a wide range of built-in methods and functionalities for adding, removing, 
	searching, sorting, and iterating over elements, saving developers time and effort in implementing these common operations.

  Type-Safety: The Collection framework promotes type-safety through the use of generics, ensuring that collections can store 
	and retrieve specific types of objects, thus reducing the risk of type-related errors at runtime.

  Interoperability: The framework provides a unified interface and common conventions, making it easier to exchange 
 	and integrate data between different components of a Java application.

  Performance and Efficiency: The Collection framework includes optimized implementations for various collection types, 
 	resulting in improved performance, reduced memory overhead, and efficient memory utilization.


Q4. Explain the various interfaces used in the Collection framework.

Ans: The Collection framework in Java provides several interfaces that define different types of collections 
	and their behaviors. Here are some key interfaces used in the Collection framework:

  Collection Interface: The Collection interface is the root interface in the Collection hierarchy. It defines
  the fundamental methods for working with collections, such as adding, removing, and querying elements. Subinterfaces
  like List, Set, and Queue extend the Collection interface.

  List Interface: The List interface extends the Collection interface and represents an ordered collection of elements. 
  It allows duplicate elements and provides methods to access, modify, and iterate over elements based on their index position.

  Set Interface: The Set interface extends the Collection interface and represents a collection of unique elements. 
  It does not allow duplicate elements and provides methods for adding, removing, and checking the presence of elements in the set.

  Queue Interface: The Queue interface extends the Collection interface and represents a collection that follows the
  First-In-First-Out (FIFO) order. It provides methods for adding, removing, and accessing elements in a specific order, such as 
  enqueue and dequeue operations.

  Map Interface: The Map interface represents a mapping between keys and values. It does not extend the Collection
  interface but is an essential part of the Collection framework. It provides methods for adding, removing, and accessing 
  elements based on their keys.


Q5. Differentiate between List and Set in Java.

Ans: Here are the key differences between List and Set in Java:

1. Duplicate Elements:

	List allows duplicate elements, meaning it can store multiple occurrences of the same element.
	Set does not allow duplicate elements, ensuring that each element is unique within the set.

2. Element Ordering:

	List maintains the order of elements as they are inserted, allowing elements to be accessed based on 	
	their index.
	Set does not maintain a specific order of elements. The order of elements in a set may vary and is 
	implementation-dependent.

3. Index-based Access:

	List allows accessing elements based on their index position using methods like get(index).
	Set does not support index-based access since it does not preserve the order of elements.

4. Required Implementations:

	List is implemented by classes like ArrayList, LinkedList, and Vector, each offering different performance
	characteristics and functionalities.
	Set is implemented by classes like HashSet, TreeSet, and LinkedHashSet, providing different mechanisms for 
	storing and accessing unique elements.

5. Use Case:

	List is commonly used when maintaining elements in a specific order or when duplicate elements are required.
	Set is preferred when uniqueness of elements is a requirement, such as storing a collection of unique IDs or 
	eliminating duplicates from a dataset.


Q6. What is the Differentiate between Iterator and ListIterator in Java.

Ans: Here are the key differences between Iterator and ListIterator in Java:

1. Direction:

	Iterator: Iterators are unidirectional and allow traversing elements in a collection only in the forward direction.
	ListIterator: ListIterators are bidirectional and allow traversing elements in a list in both forward and backward directions.

2. Collection Type:

 	Iterator: Iterators can be used with any collection that implements the Iterable interface, such as List, Set, and Queue.
	ListIterator: ListIterators are specific to List implementations and can only be used with classes that implement the 
	List interface, such as ArrayList, LinkedList, and Vector.

3. Operations:

	Iterator: Iterators support basic operations like traversing elements, removing elements, and checking if there are 
	more elements available.
	ListIterator: ListIterators provide additional operations compared to iterators, such as adding elements, replacing 
	elements, and retrieving the index of the current element.

4. Starting Position:

	Iterator: Iterators always start at the beginning of the collection.
	ListIterator: ListIterators can be positioned at any index within a list, allowing for more flexibility in 
	traversing the list.

5. Forward-Only vs. Bidirectional:

	Iterator: Iterators are designed for forward-only traversal, making them suitable for simple iteration and 
	processing of elements.
	ListIterator: ListIterators are designed for bidirectional traversal, making them suitable for more advanced 
	list manipulation, including backward iteration and modification of elements.


Q7. What is the Differentiate between Comparable and Comparator.

Ans: Here are the key differences between Comparable and Comparator in Java:

1. Interface Implementation:

	Comparable: The Comparable interface is implemented by the class itself to define its natural ordering. The 
	compareTo() method is overridden to provide the comparison logic.
	Comparator: The Comparator interface is a separate class or object that is implemented to define a custom 
	ordering for a class. The compare() method is implemented to provide the comparison logic.

2. Object vs. External Comparison:

	Comparable: The Comparable interface provides the natural ordering of objects. It defines how objects of a 
	class should be sorted by default.
	Comparator: The Comparator interface allows for multiple custom comparison implementations. It enables sorting
	objects based on different criteria or for classes that do not implement Comparable.

3. Class Dependency:

	Comparable: The Comparable interface is tightly coupled with the class being compared. The comparison logic is 
	defined within the class itself.
	Comparator: The Comparator interface is separate from the class being compared. It provides flexibility by 
	allowing multiple custom comparison implementations without modifying the class.

4. Single vs. Multiple Criteria:

	Comparable: The Comparable interface allows sorting objects based on a single natural ordering defined within the class.
	Comparator: The Comparator interface allows sorting objects based on multiple custom criteria defined in separate
	Comparator implementations.

5. Default vs. Custom Ordering:

	Comparable: The natural ordering defined by Comparable is the default ordering used by sorting methods like Collections.sort(). 
	The class is responsible for its own ordering.
	Comparator: Comparator provides custom ordering separate from the natural ordering. It allows sorting based on different 
	criteria without modifying the class.


Q8. What is collision in HashMap?

Ans: In a HashMap, collision occurs when two or more keys are mapped to the same hash code and bucket. This situation arises due 
	to the limited number of buckets compared to the number of possible hash codes. Collisions can lead to performance degradation 
	as it requires additional handling to resolve the conflicts. HashMap uses techniques like chaining (linked lists) or open 
	addressing (probing) to handle collisions and store multiple values for the same hash code in a single bucket.


Q9. Distinguish between a hashmap and a Treemap.

Ans: Here are the key differences between HashMap and TreeMap in Java:

1. Data Structure:

	HashMap: HashMap is implemented using an array of buckets and uses hashing to store and retrieve elements. It does not 
	maintain any specific order of the elements.
	TreeMap: TreeMap is implemented using a Red-Black Tree, which is a self-balancing binary search tree. It maintains 
	elements in sorted order based on their natural ordering or a custom comparator.

2. Ordering:

	HashMap: HashMap does not provide any inherent ordering of the elements. The order in which elements are stored and 
	retrieved may vary.
	TreeMap: TreeMap maintains elements in sorted order, either based on their natural ordering (if the elements implement 
	Comparable) or a custom comparator.

3. Performance:

	HashMap: HashMap provides faster performance for insertion, deletion, and retrieval operations (average-case time complexity
	of O(1)). However, performance may degrade in the case of collisions.
	TreeMap: TreeMap provides slower performance compared to HashMap for insertion, deletion, and retrieval operations (time 
	complexity of O(log N)). The tree structure requires maintaining balance, resulting in additional overhead.

4. Iteration:

	HashMap: Iterating over elements in a HashMap does not guarantee any specific order. The order may seem random.
	TreeMap: TreeMap provides iteration in sorted order, allowing for traversal of elements in ascending or descending order.

5. Null Keys and Values:

	HashMap: HashMap allows a single null key and multiple null values. Null keys are mapped to the same bucket.
	TreeMap: TreeMap does not allow null keys. All keys must be non-null. However, it allows null values.


Q10. Define LinkedHashMap in Java.

Ans: LinkedHashMap is a subclass of HashMap that maintains a predictable iteration order, which is the order in which the 
	entries were initially added or the order based on the access mode. It combines the features of a HashMap and a 
	LinkedList to provide efficient key-value mappings and predictable iteration. LinkedHashMap allows null keys and 
	values, offers O(1) time complexity for insertion and retrieval, and supports three types of ordering: insertion 
	order, access order, or a custom order using the access order mode.